{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coloque aqui o nome do tutorial de voc\u00eas \u00b6 Alunes: Victor Laperuta de Moura / Ana Clara Carneiro de Freitas Curso: Engenharia da Computa\u00e7\u00e3o Semestre: 10 / 6 Contato: victorlm2@al.insper.edu.br / anaccf5@al.insper.edu.br Ano: 2020 Come\u00e7ando \u00b6 Para seguir esse tutorial \u00e9 necess\u00e1rio: Hardware: DE10-Standard e acess\u00f3rios Softwares: Quartus 18.01, Java Documentos: DE10-Standard_User_manual.pdf Motiva\u00e7\u00e3o \u00b6 Esse tutorial foi realizado com o intuito de aprender e entender um pouco mais sobre uma das mais novas linguagens de design de hardware, Chisel, e apresentar sua infraestrutura, algumas formas de implement\u00e1-la e quais s\u00e3o suas possibilidades. Introdu\u00e7\u00e3o sobre Chisel \u00b6 Chisel \u00e9 uma linguagem de design de hardware extremamente nova e que foi desenvolvida como uma alternativa \u00e0s HDLs (Hardware Description Languages), como por exemplo Verilog e VHDL. O que diferencia a Chisel das mais cl\u00e1ssicas \u00e9 a possibilidade de realizar a programa\u00e7\u00e3o por meio de uma linguagem mais atualizada, sendo essa o Scala, facilitando o desenvolvimento de circuitos e designs mais complexos. Al\u00e9m disso, o Chisel se baseia na estrutura de compilador de hardware FIRRTL (Flexible Intermediate Representation for RTL) , a qual permite uma compila\u00e7\u00e3o de circuitos mais otimizada, em menor tempo e mais otimizada. Caso deseje saber um pouco mais sobre a linguagem: Livro Design Digital com Chisel Documenta\u00e7\u00e3o Chisel Github Chisel Chisel Tutorial (Sem necessidade de instala\u00e7\u00e3o) \u00b6 Antes de continuar o tutorial, pode ser interessante executar este notebook para ter uma no\u00e7\u00e3o melhor da linguagem scala, caso n\u00e3o esteja familiarizado. Em especial, o arquivo \"1_intro_to_scala.ipynb\" pode ser bem \u00fatil, e os demais v\u00e3o cobrir pontos que n\u00e3o abordaremos neste projeto, por exemplo como construir seus pr\u00f3prios m\u00f3dulos do zero no Chisel. Instala\u00e7\u00f5es \u00b6 Instala\u00e7\u00e3o no Ubuntu \u00b6 Instala\u00e7\u00e3o do Java . Info Explicar por qu\u00ea o Java \u00e9 necess\u00e1rio. Instala\u00e7\u00e3o do Scala . Info Explicar por qu\u00ea o Scala \u00e9 necess\u00e1rio. Instala\u00e7\u00e3o do Verilator . Info Explicar por qu\u00ea o Verilator \u00e9 necess\u00e1rio. Instala\u00e7\u00e3o no Windows \u00b6 Baixar arquivo do SBT Info \u00c9 necess\u00e1rio baixar o SBT pois essa \u00e9 a ferramenta que permite a execu\u00e7\u00e3o e constru\u00e7\u00e3o de projetos em Scala e Java. Instala\u00e7\u00e3o do Chocolatey Info Foi escolhido o Chocolatey como ferramenta para instalar o SBT, mas outras, como o scoop, podem ser utilizadas para instalar o SBT no seu computador. Para instalar a ferramenta utilize o comando abaixo: choco install sbt Clonando o reposit\u00f3rio \u00b6 Clonar o reposit\u00f3rio: Chisel Playground . Ir para a pasta \"blinky\", que \u00e9 o projeto que vamos compilar e demonstrar o funcionamento na FPGA: cd chisel-playground/blinky Nos arquivos do projeto, ao entrar na pasta src/main/scala , existem dois principais: \"Blinky.scala\" e \"TopLevel.scala\". O \"Blinky.scala\" \u00e9 respons\u00e1vel por criar o m\u00f3dulo que controla 3 LEDs: o primeiro e o segundo piscam alternadamente duas vezes a cada frequ\u00eancia definida, e o terceiro LED realiza um \"fade-in\", atrav\u00e9s de um PWM definido no arquivo. O \"TopLevel.scala\" \u00e9 respons\u00e1vel por mapear os inputs e outputs para o m\u00f3dulo do \"Blinky\" e converter o clock da FPGA para 25Mhz utilizando o pll selecionado. Info O clock utilizado na FPGA foi o de 50Mhz, mas um dos arquivos compilados pelo projeto \u00e9 respons\u00e1vel por converter a frequ\u00eancia para 25Mhz. Como o c\u00f3digo que vamos compilar precisa de recursos espec\u00edficos da placa na qual vai ser rodado, \u00e9 preciso antes procurar pela placa nos arquivos do projeto. Para isso, \u00e9 poss\u00edvel conferir as placas dispon\u00edveis na pasta src/main/resources , onde temos os plls que ser\u00e3o utilizados por cada uma. Em seguida, podemos compilar o projeto para verilog. Como argumento do comando \"make\", \u00e9 poss\u00edvel selecionar a placa em que queremos executar o c\u00f3digo. No caso, como estamos usando uma placa DE-10 da Altera, a mais pr\u00f3xima seria a \"de1_soc_revF\". make chisel BOARD=de1_soc_revF O output dos arquivos compilados se encontra na pasta generated . Dos arquivos gerados, vamos precisar de apenas dois para passar para a FPGA via quartus: o \"Toplevel.v\" e o pll gerado \"pll_de1_soc_revF.v\" (TODO: conferir depois se o nome \u00e9 esse mesmo). Com ambos os arquivos gerados: Abra o quartus e crie um novo projeto. Importe os dois arquivos e configure o \"Toplevel.v\" como toplevel do projeto. Mapeie os LEDs e o clock no Pin Planner. Compile e passe para a FPGA.","title":"Home"},{"location":"#coloque-aqui-o-nome-do-tutorial-de-voces","text":"Alunes: Victor Laperuta de Moura / Ana Clara Carneiro de Freitas Curso: Engenharia da Computa\u00e7\u00e3o Semestre: 10 / 6 Contato: victorlm2@al.insper.edu.br / anaccf5@al.insper.edu.br Ano: 2020","title":"Coloque aqui o nome do tutorial de voc\u00eas"},{"location":"#comecando","text":"Para seguir esse tutorial \u00e9 necess\u00e1rio: Hardware: DE10-Standard e acess\u00f3rios Softwares: Quartus 18.01, Java Documentos: DE10-Standard_User_manual.pdf","title":"Come\u00e7ando"},{"location":"#motivacao","text":"Esse tutorial foi realizado com o intuito de aprender e entender um pouco mais sobre uma das mais novas linguagens de design de hardware, Chisel, e apresentar sua infraestrutura, algumas formas de implement\u00e1-la e quais s\u00e3o suas possibilidades.","title":"Motiva\u00e7\u00e3o"},{"location":"#introducao-sobre-chisel","text":"Chisel \u00e9 uma linguagem de design de hardware extremamente nova e que foi desenvolvida como uma alternativa \u00e0s HDLs (Hardware Description Languages), como por exemplo Verilog e VHDL. O que diferencia a Chisel das mais cl\u00e1ssicas \u00e9 a possibilidade de realizar a programa\u00e7\u00e3o por meio de uma linguagem mais atualizada, sendo essa o Scala, facilitando o desenvolvimento de circuitos e designs mais complexos. Al\u00e9m disso, o Chisel se baseia na estrutura de compilador de hardware FIRRTL (Flexible Intermediate Representation for RTL) , a qual permite uma compila\u00e7\u00e3o de circuitos mais otimizada, em menor tempo e mais otimizada. Caso deseje saber um pouco mais sobre a linguagem: Livro Design Digital com Chisel Documenta\u00e7\u00e3o Chisel Github Chisel","title":"Introdu\u00e7\u00e3o sobre Chisel"},{"location":"#chisel-tutorial-sem-necessidade-de-instalacao","text":"Antes de continuar o tutorial, pode ser interessante executar este notebook para ter uma no\u00e7\u00e3o melhor da linguagem scala, caso n\u00e3o esteja familiarizado. Em especial, o arquivo \"1_intro_to_scala.ipynb\" pode ser bem \u00fatil, e os demais v\u00e3o cobrir pontos que n\u00e3o abordaremos neste projeto, por exemplo como construir seus pr\u00f3prios m\u00f3dulos do zero no Chisel.","title":"Chisel Tutorial (Sem necessidade de instala\u00e7\u00e3o)"},{"location":"#instalacoes","text":"","title":"Instala\u00e7\u00f5es"},{"location":"#instalacao-no-ubuntu","text":"Instala\u00e7\u00e3o do Java . Info Explicar por qu\u00ea o Java \u00e9 necess\u00e1rio. Instala\u00e7\u00e3o do Scala . Info Explicar por qu\u00ea o Scala \u00e9 necess\u00e1rio. Instala\u00e7\u00e3o do Verilator . Info Explicar por qu\u00ea o Verilator \u00e9 necess\u00e1rio.","title":"Instala\u00e7\u00e3o no Ubuntu"},{"location":"#instalacao-no-windows","text":"Baixar arquivo do SBT Info \u00c9 necess\u00e1rio baixar o SBT pois essa \u00e9 a ferramenta que permite a execu\u00e7\u00e3o e constru\u00e7\u00e3o de projetos em Scala e Java. Instala\u00e7\u00e3o do Chocolatey Info Foi escolhido o Chocolatey como ferramenta para instalar o SBT, mas outras, como o scoop, podem ser utilizadas para instalar o SBT no seu computador. Para instalar a ferramenta utilize o comando abaixo: choco install sbt","title":"Instala\u00e7\u00e3o no Windows"},{"location":"#clonando-o-repositorio","text":"Clonar o reposit\u00f3rio: Chisel Playground . Ir para a pasta \"blinky\", que \u00e9 o projeto que vamos compilar e demonstrar o funcionamento na FPGA: cd chisel-playground/blinky Nos arquivos do projeto, ao entrar na pasta src/main/scala , existem dois principais: \"Blinky.scala\" e \"TopLevel.scala\". O \"Blinky.scala\" \u00e9 respons\u00e1vel por criar o m\u00f3dulo que controla 3 LEDs: o primeiro e o segundo piscam alternadamente duas vezes a cada frequ\u00eancia definida, e o terceiro LED realiza um \"fade-in\", atrav\u00e9s de um PWM definido no arquivo. O \"TopLevel.scala\" \u00e9 respons\u00e1vel por mapear os inputs e outputs para o m\u00f3dulo do \"Blinky\" e converter o clock da FPGA para 25Mhz utilizando o pll selecionado. Info O clock utilizado na FPGA foi o de 50Mhz, mas um dos arquivos compilados pelo projeto \u00e9 respons\u00e1vel por converter a frequ\u00eancia para 25Mhz. Como o c\u00f3digo que vamos compilar precisa de recursos espec\u00edficos da placa na qual vai ser rodado, \u00e9 preciso antes procurar pela placa nos arquivos do projeto. Para isso, \u00e9 poss\u00edvel conferir as placas dispon\u00edveis na pasta src/main/resources , onde temos os plls que ser\u00e3o utilizados por cada uma. Em seguida, podemos compilar o projeto para verilog. Como argumento do comando \"make\", \u00e9 poss\u00edvel selecionar a placa em que queremos executar o c\u00f3digo. No caso, como estamos usando uma placa DE-10 da Altera, a mais pr\u00f3xima seria a \"de1_soc_revF\". make chisel BOARD=de1_soc_revF O output dos arquivos compilados se encontra na pasta generated . Dos arquivos gerados, vamos precisar de apenas dois para passar para a FPGA via quartus: o \"Toplevel.v\" e o pll gerado \"pll_de1_soc_revF.v\" (TODO: conferir depois se o nome \u00e9 esse mesmo). Com ambos os arquivos gerados: Abra o quartus e crie um novo projeto. Importe os dois arquivos e configure o \"Toplevel.v\" como toplevel do projeto. Mapeie os LEDs e o clock no Pin Planner. Compile e passe para a FPGA.","title":"Clonando o reposit\u00f3rio"}]}